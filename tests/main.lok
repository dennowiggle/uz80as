0001   0000             ; ===========================================================================
0002   0000             ; uz80as, a macro assembler for Z80 based microprocessors.
0003   0000             ; ===========================================================================
0004   0000             
0005   0000             ; All this file must equal the TASM output
0006   0000             
0007   0000             	.org 0
0008   0000             
0009   0000             ; ----------------
0010   0000             ; Test expressions
0011   0000             ; ----------------
0012   0000             
0013   0000             ; This additionally tests a db that must span 3 lines in the lst file.
0014   0000             
0015   0000 00 7F 80 FF 	.db 0, 127, 128, 255
0016   0004 00 FF 81 80 	.db 256,-1,-127,-128
0017   0008 01 00 FF    	.db -255, +0, +255
0018   000B 01 00 FF 01 	.db 1+256, +1+255, -1+256, +1-256
0019   000F 01 FF       	.db 1-256, -1-256
0020   0011 06 FA FA 06 	.db 2*3, 2*(-3), -2*3, -2*(-3)
0021   0015             
0022   0015             ; tasm fails for these
0023   0015             
0024   0015             ;	.db 2*-3, -2*-3
0025   0015             
0026   0015 FF 01 FF 01 	.db +-1, --1, ---1, +--1
0027   0019             
0028   0019             ; tasm fails for this
0029   0019             
0030   0019             ;	.db -+1
0031   0019             ; 	.db 1/0
0032   0019             
0033   0019 16          	.db 5+7-3*5/2
0034   001A 00 00 00 01 	.db 0/256, 0*256, 0*0, 255/-1
0035   001E 00 00       	.db 0%5, 256%8
0036   0020             
0037   0020 01 00 00 01 	.db 5==5, 5!=5, 5==6, 5!=6, 5=5, 5=6
0037   0024 01 00 
0038   0026 00 00 01    	.db 5>5, 5>6, 6>5
0039   0029 00 01 00    	.db 5<5, 5<6, 6<5
0040   002C 01 00 01    	.db 5>=5, 5>=6, 6>=5
0041   002F 01 01 00    	.db 5<=5, 5<=6, 6<=5
0042   0032 00 00 01    	.db 5==-5, -5==5, -5==-5
0043   0035 00 00 01    	.db 5=-5, -5=5, -5=-5
0044   0038 01 01 00    	.db 5!=-5, -5!=5, -5!=-5
0045   003B 01 00 00    	.db 5>-5, -5>5, -5>-5
0046   003E 00 01 00    	.db 5<-5, -5<5, -5<-5
0047   0041 00 01 01    	.db 5<=-5, -5<=5, -5<=-5
0048   0044 01 00 01    	.db 5>=-5, -5>=5, -5>=-5
0049   0047 05 04 05 07 	.db 5&5, 5&6, 5|5, 5|6, 5^5, 5^6
0049   004B 00 03 
0050   004D 7F 01 00 01 	.db 255>>1, 255>>7, 255>>8, 256>>8
0051   0051 02 80 00 00 	.db 1<<1, 1<<7, 1<<8, 255<<8
0052   0055 01 01 00 00 	.db 1>>0, 1<<0, 1>>-1, 1<<-1
0053   0059 FF FE 00 FF 	.db ~0, ~1, ~255, ~256
0054   005D 0A          	.db 1+(1+(1+(1+(1+(1+(1+(1+(1+(1)))))))))
0055   005E 00          	.db 1-(1+(1-(1+(1-(1+(1-(1+(1-(1)))))))))
0056   005F             
0057   005F             ; More shifting.
0058   005F             
0059   005F             	;       1      30      31      0       1
0060   005F FF FF FF FF 	.db -1>>1, -1>>30, -1>>31, -1>>32, -1>>33
0060   0063 FF 
0061   0064             
0062   0064             	;              1             30             31
0063   0064 FF 01 00    	.db $7FFFFFFF>>1, $7FFFFFFF>>30, $7FFFFFFF>>31
0064   0067             
0065   0067             	; These two give $FF for TASM on Linux 64 bits (long is 64 bits)
0066   0067             	; They must be 0 since we say that we use 32 bit integers.
0067   0067                     ;              0              1
0068   0067             	; .db $7FFFFFFF>>32, $7FFFFFFF>>33
0069   0067             
0070   0067             	;       31      2        0        0        31
0071   0067 FF FF FF FF 	.db -1>>-1, -1>>-30, -1>>-31, -1>>-32, -1>>-33
0071   006B FF 
0072   006C             
0073   006C             	;              31             31
0074   006C 00 00       	.db $7FFFFFFF>>-1, $7FFFFFFF>>-33
0075   006E             
0076   006E             	; These two give $FF for TASM on Linux 64 bits (long is 64 bits)
0077   006E             	; They must be 0 since we say that we use 32 bit integers.
0078   006E             	;              2               0                   0
0079   006E             	; .db $7FFFFFFF>>-30, $7FFFFFFF>>-31, $7FFFFFFF>>-32
0080   006E             
0081   006E FF FF 01 01 	.db -1>>0, -1<<0, 1>>0, 1<<0
0082   0072             
0083   0072             ; Prefixes and suffixes
0084   0072             
0085   0072 00 00 00    	.db %0, 0b, 0B
0086   0075 01 01 01    	.db %1, 1b, 1B
0087   0078 00 00 00    	.db %00000000, 00000000b, 00000000B
0088   007B FF FF FF    	.db %11111111, 11111111b, 11111111B
0089   007E FF FF FF    	.db %111111111, 111111111b, 111111111B
0090   0081 AA AA AA    	.db %10101010, 10101010b, 10101010B
0091   0084             
0092   0084 00 00 00    	.db @0, 0o, 0O
0093   0087 01 01 01    	.db @1, 1o, 1O
0094   008A FF FF FF    	.db @377, 377o, 377O
0095   008D 3F 3F 3F    	.db @477, 477o, 477O
0096   0090 62 62 62    	.db @142, 142o, 142O
0097   0093             
0098   0093 00 00 01 01 	.db 0d, 0D, 1d, 1D
0099   0097 FF FF 00 00 	.db 255d, 255D, 256d, 256D
0100   009B FF FF 80 80 	.db -1d, -1D, -128d, -128D
0101   009F             
0102   009F 00 00 00    	.db $0, 0h, 0H
0103   00A2 01 01 01    	.db $1, 1h, 1H
0104   00A5 FF FF FF FF 	.db $ff, $FF, 0ffh, 0FFH
0105   00A9 FF FF 00    	.db 0ffH, 0FFh, $100
0106   00AC 00 00       	.db 100h, 100H
0107   00AE 1E E1       	.db 1eH, 0E1h
0108   00B0             
0109   00B0 01 01       	.db 3%2, 3%%10
0110   00B2 4D 00       	.db 255-$, 255-$ff
0111   00B4             
0112   00B4             ; DW, WORD
0113   00B4             
0114   00B4 00 00 FF 00 	.dw 0, 255, -255, 256
0114   00B8 01 FF 00 01 
0115   00BC 7F 00 80 00 	.dw 127, 128, -127, -128
0115   00C0 81 FF 80 FF 
0116   00C4 FF FF 00 00 	.dw 65535, 65536, -1, -65536
0116   00C8 FF FF 00 00 
0117   00CC FF FF FF 7F 	.dw -65537, 32767, 32768, -32767
0117   00D0 00 80 01 80 
0118   00D4 00 80       	.word -32768
0119   00D6 30 00 09 00 	.dw '0', '9'-'0', 'z'-'a', 'Z'-'A'
0119   00DA 19 00 19 00 
0120   00DE             
0121   00DE             ; BLOCK
0122   00DE             
0123   00DE             	.block -1
0124   00DD             	.block 1
0125   00DE             	.block 1
0126   00DF 02          	.db 2
0127   00E0             	.block -2
0128   00DE             	.block 2
0129   00E0             	.ds 2	; ds is equal to block
0130   00E2             
0131   00E2             ; BYTE
0132   00E2             
0133   00E2 00 01 FF 00 	.byte 0, 1, 255, 256
0134   00E6 FF 80       	.byte -1, -128
0135   00E8             
0136   00E8             ; CODES, NOCODES
0137   00E8             
	.nocodes

; Printed as is --------

; Comment column 0

	.db 0, 1, 2, 3

; ----------------------

0148   00EC             	.codes
0149   00EC             
0150   00EC             ; Printed after line number, etc.
0151   00EC             
0152   00EC             ; ECHO accepted.
0153   00EC             
0154   00EC             	.echo "This is a string "
0155   00EC             	.echo 127+1
0156   00EC             	.echo " concatenated.\n"
0157   00EC             
0158   00EC             ; FILL .
0159   00EC             
0160   00EC             	.fill 0, 1
0161   00EC             	.fill 0, -1
0162   00EC             	.fill 0
0163   00EC 01          	.fill 1, 1
0164   00ED FF          	.fill 1, -1
0165   00EE FF          	.fill 1
0166   00EF FF FF       	.fill 2
0167   00F1 FF FF FF    	.fill 3
0168   00F4 FF FF FF FF 	.fill 4
0169   00F8 FF FF FF FF 	.fill 5
0169   00FC FF 
0170   00FD FF FF FF FF 	.fill 6
0170   0101 FF FF 
0171   0103 FF FF FF FF 	.fill 7
0171   0107 FF FF FF 
0172   010A FF FF FF FF 	.fill 8
0172   010E FF FF FF FF 
0173   0112 FF FF FF FF 	.fill 9
0173   0116 FF FF FF FF 
0173   011A FF 
0174   011B             
0175   011B             ; LIST, NOLIST
0176   011B             
0181   011B             	.list
0182   011B             
0183   011B             ; This appears.
0184   011B             
0185   011B             ; LSFIRST, MSFIRST
0186   011B             
0187   011B 34 12       	.word $1234
0188   011D             	.msfirst
0189   011D 12 34       	.word $1234
0190   011F             	.lsfirst
0191   011F 34 12       	.word $1234
0192   0121             
0193   0121             ; ORG simple.
0194   0121             
0195   0121             	.org $
0196   0122             	.org $+1
0197   0121             	.org $-1
0198   0122             	.org *+1
0199   0121             	.org *-1
0200   0121             
0201   0121             ; ORG forms.
0202   0121             
0203   0122             *=$+1
0204   0123             $=*+1
0205   0124             	*=*+1
0206   0125             	$=$+1
0207   0126             	$= $+1
0208   0127             	*= *+1
0209   0127             
0210   0127 80          	.db 128
0211   0128             
0212   0128             ; Testing * (current program counter) and multiply operator
0213   0128             
0214   0128 50          	.db **2
0215   0129             
0216   0129             ; Not correctly parsed by TASM.
0217   0129             
0218   0129             ;	.db ***
0219   0129             ;	.db 2**
0220   0129             
0221   0129             ; Test label in org: must take value after the org.
0222   0129             
0223   0129             orglab
0224   01A8             orglab1	.org $+127
0225   01A8 A8 01       orglab2	.dw orglab1
0226   01AA             orglab3
0227   01AB             orglab4 .org $+1
0228   01AB 29 01       	.dw orglab
0229   01AD AA 01       	.dw orglab3
0230   01AF AB 01       	.dw orglab4
0231   01B1             
0232   01B1             ; EQU
0233   01B1             
0234   01B1             label1		.equ 1
0235   01B1             label2:		.equ 2
0236   01B1             label3_		.equ 3
0237   01B1             label4_:	.equ 4
0238   01B1             label5		=5
0239   01B1             label6:		=6
0240   01B1             label7_		=7
0241   01B1             label8_:	=8
0242   01B1             label9.		=9
0243   01B1             labela.:	=10
0244   01B1             labelb		= 11
0245   01B1             
0246   01B1             ; PAGE/NOPAGE
0247   01B1             
0248   01B1             ; TEXT
0249   01B1             
0250   01B1 0A 0D 08 09 	.text "\n\r\b\t\f\\\""
0250   01B5 0C 5C 22 
0251   01B8 61 7A 41 5A 	.text "azAZ09"
0251   01BC 30 39 
0252   01BE 00 FF 5D    	.text "\000\377\135"
0253   01C1             
0254   01C1             ; DB, DW with text.
0255   01C1             
0256   01C1             	
0257   01C1 0A 0D 08 09 	.db "\n\r\b\t\f\\\""
0257   01C5 0C 5C 22 
0258   01C8 61 7A 41 5A 	.db "azAZ09"
0258   01CC 30 39 
0259   01CE 00 FF 5D    	.db "\000\377\135"
0260   01D1 0A 00 0D 00 	.dw "\n\r\b\t\f\\\""
0260   01D5 08 00 09 00 
0260   01D9 0C 00 5C 00 
0260   01DD 22 00 
0261   01DF 61 00 7A 00 	.dw "azAZ09"
0261   01E3 41 00 5A 00 
0261   01E7 30 00 39 00 
0262   01EB 00 00 5D 00 	.dw "\000\135"
0263   01EF 48 69 01 02 	.db "Hi", 1, 2, "Bye"
0263   01F3 42 79 65 
0264   01F6 48 00 69 00 	.dw "Hi", 1, 2, "Bye"
0264   01FA 01 00 02 00 
0264   01FE 42 00 79 00 
0264   0202 65 00 
0265   0204             
0266   0204             ; This gives a different result in TASM.
0267   0204             
0268   0204             ;	.dw "\377"
0269   0204             
0270   0204             ; Trailing commas.
0271   0204             
0272   0204 01 02       	.db 1, 2,
0273   0206 61 62 63 64 	.db "ab", "cd",
0274   020A 01 02       	.db 1, 2 ; comment
0275   020C 61 62 63 64 	.db "ab", "cd", ;comment
0276   0210             
0277   0210             ; Mixed case directives.
0278   0210             
0279   0210 00          	.dB 0
0280   0211 01          	.Db 1
0281   0212             
0282   0212             ; Directives in column 0.
0283   0212             
0284   0212 02          .db 2
0285   0213 03          .dB 3
0286   0214 04          .DB 4
0287   0215             
0288   0215             ; Label names.
0289   0215             
0290   0215             _
0291   0215             L
0292   0215             _L9._
0293   0215             LL9._
0294   0215             la9._
0295   0215             l
0296   0215             
0297   0215             ; Line configurations.
0298   0215             
0299   0215             ; comment
0300   0215             	; comment
0301   0215             ;
0302   0215             	;
0303   0215             L10
0304   0215 00          L11	.db 0
0305   0216             L12	;comment
0306   0216 00          L13.db	.db 0
0307   0217             L14
0308   0217 00          L15	.db 0	; comment
0309   0218 00          L16	.db 0;comment
0310   0219             P10:
0311   0219 00          P11:	.db 0
0312   021A             P12:	;comment
0313   021A 00          P13.db:	.db 0
0314   021B             P14:
0315   021B 00          P15:	.db 0	; comment
0316   021C 00          P16:	.db 0;comment
0317   021D             
0318   021D             ; This should fail if uncommented.
0319   021D             
0320   021D             ;label12;comment
0321   021D             
0322   021D             ; Multiline scapes
0323   021D             
0324   021D 05          	.DB 5\ .DB 6\.DB 7
0324   021E 06          
0324   021F 07          
0325   0220             ML1	\ML2 .DB 1
0325   0220 01          
0326   0221             
0327   0221             ; Preprocessor
0328   0221             
0329   0221             #define Mm9._
0330   0221             #define _Mm9._
0331   0221             	#define MAC
0332   0221             ; #define MOC
0333   0221             #define ONE	1
0334   0221             #define TWO	(1+1)
0335   0221             
0336   0221             ; TASM allows for this
0337   0221             ; #define BAD%	3
0338   0221             ;	.db BAD%
0339   0221             
0340   0221             #define SUM1(n)	(n+ONE)
0341   0221             
0342   0221 06          	.db SUM1(5)
0343   0222             
0344   0222             #define MUL(a,b)	a * b
0345   0222             
0346   0222 1E          	.db MUL(5,6)
0347   0223             
0348   0223             #define VOID(a,b)
0349   0223             
0350   0223             VOID
0351   0223             VOID(5)
0352   0223             VOID(5,6)
0353   0223             
0354   0223             #define	ARG1(a,b,c)	a
0355   0223             
0356   0223 07          	.db ARG1(7)
0357   0224             
0358   0224             #define	ARG2(a,b,c)	b
0359   0224             
0360   0224 08          	.db ARG2(1,8)
0361   0225             
0362   0225             ; TASM doesn't allow _a, _7 _. for arguments
0363   0225             ; #define ALLOW(a,ab,_a,_7,_.)	a+ab+_a+_7+_.
0364   0225             ;	.db ALLOW(1,2,3,4,5)
0365   0225             
0366   0225             #define ALLOW(a,a7,a7b7)	a+a7+a7b7
0367   0225             
0368   0225 06          	.db ALLOW(1,2,3)
0369   0226 06          	.db ALLOW( 1 , 2 , 3 )
0370   0227             
0371   0227             #define CONT	5+
0372   0227             #defcont	6+
0373   0227             #defcont	7
0374   0227             
0375   0227 12          	.db CONT
0376   0228             
0377   0228             #define	MULTILINE	.DB 1\ .DB 2\
0378   0228             #defcont		.DB 3\
0379   0228             #defcont		.DB 4
0380   0228             
0381   0228 01          	MULTILINE
0381   0229 02          
0381   022A 03          
0381   022B 04          
0382   022C             
0383   022C             #define INCL
0384   022C             
0385   022C             #ifdef INCL
0386   022C 01          	.db 1
0387   022D             #endif
0388   022D~            #ifndef INCL
0389   022D~            	.db 2
0390   022D             #endif
0391   022D             #ifdef INCL
0392   022D 08          	.db 8
0393   022E~            #else
0394   022E~            	.db 16
0395   022E             #endif
0396   022E~            #ifndef INCL
0397   022E~            	.db 32
0398   022E             #else
0399   022E 40          	.db 64
0400   022F             #endif
0401   022F             
0402   022F~            #ifdef NINCL
0403   022F~            	.db 1
0404   022F             #endif
0405   022F             #ifndef NINCL
0406   022F 02          	.db 2
0407   0230             #endif
0408   0230~            #ifdef NINCL
0409   0230~            	.db 8
0410   0230             #else
0411   0230 10          	.db 16
0412   0231             #endif
0413   0231             #ifndef NINCL
0414   0231 20          	.db 32
0415   0232~            #else
0416   0232~            	.db 64
0417   0232             #endif
0418   0232             
0419   0232             #ifdef INCL
0420   0232~            	#ifdef NINCL
0421   0232~            		.db 1
0422   0232             	#else
0423   0232 02          		.db 2
0424   0233             	#endif
0425   0233             	#ifndef NINCL
0426   0233 04          		.db 4
0427   0234~            	#else
0428   0234~            		.db 8
0429   0234             	#endif
0430   0234~            #else
0431   0234~            	#ifdef NINCL
0432   0234~            		.db 16
0433   0234~            	#else
0434   0234~            		.db 32
0435   0234~            	#endif
0436   0234~            	#ifndef NINCL
0437   0234~            		.db 64
0438   0234~            	#else
0439   0234~            		.db 128
0440   0234~            	#endif
0441   0234             #endif
0442   0234             
0443   0234~            #ifndef INCL
0444   0234~            	#ifdef NINCL
0445   0234~            		.db 1
0446   0234~            	#else
0447   0234~            		.db 2
0448   0234~            	#endif
0449   0234~            	#ifndef NINCL
0450   0234~            		.db 4
0451   0234~            	#else
0452   0234~            		.db 8
0453   0234~            	#endif
0454   0234             #else
0455   0234~            	#ifdef NINCL
0456   0234~            		.db 16
0457   0234             	#else
0458   0234 20          		.db 32
0459   0235             	#endif
0460   0235             	#ifndef NINCL
0461   0235 40          		.db 64
0462   0236~            	#else
0463   0236~            		.db 128
0464   0236             	#endif
0465   0236             #endif
0466   0236             
0467   0236             prgend	.end	prgend
